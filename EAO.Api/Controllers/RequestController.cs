using EAO.Api.Extensions;
using EAO.BL.DTOs.Request;
using EAO.BL.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System.Security.Claims;

namespace EAO.Api.Controllers
{
    [Produces("application/json")]
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]

    public class RequestController : ExtraController
    {
        private readonly RequestService _requestService;
        private readonly PatientService _patientService;
        private readonly IncidentService _incidentService;
        private readonly GovernorateService _governorateService;
        private readonly AreaService _areaService;
        public RequestController(TicketService ticketService, RequestService requestService, PatientService patientService, IncidentService incidentService, GovernorateService governorateService, AreaService areaService)
        {
            _requestService = requestService;
            _patientService = patientService;
            _incidentService = incidentService;
            _governorateService = governorateService;
            _areaService = areaService;
        }

        /// <summary>
        /// This endpoint is used to create a new request with all details provided as one payload.
        /// </summary>
        /// <param name="addRequestDto"></param>
        /// <returns>requestId generated by the CRM</returns>
        /// <remarks>
        /// 
        /// Sample requset
        /// Post Api/Request/AddRequest
        /// 
        /// </remarks>
        /// <response code="200">Returns requestId generated by the CRM </response>
        /// <response code="401">Returns Unauthorized: Authentication failed.</response>
        /// <response code="400">Returns Bad Request: Missing or invalid parameters</response>

        [HttpPost]
        [Route("CreateRequest")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesDefaultResponseType]
        public IActionResult CreateRequest(AddRequestDto addRequestDto)
        {

            Claim createdObj = HttpContext.User.Claims.Where(x => x.Type == ClaimTypes.Email).FirstOrDefault();

            if (createdObj != null)
            {
                addRequestDto.CreatedBy = createdObj.Value;
            }

            if (addRequestDto == null) return BadRequest("Request data is required.");

            #region Validation

            //Validation State
            if (!_patientService.IsGenderValid(addRequestDto.GenderId))
            {
                ModelState.AddModelError("genderId", "gender id is not valid");
            }

            //Nationality 
            if (!_patientService.IsNationalityValid(addRequestDto.NationalityId))
            {
                ModelState.AddModelError("nationalityId", "nationality id is not valid");
            }

            //SubType
            if (!_incidentService.IsSubTypeValid(addRequestDto.RequestSubType))
            {
                ModelState.AddModelError("subType", "sub type id is not valid");
            }

            //Governorate
            if (!_governorateService.IsGovernorateValid(addRequestDto.GovernorateId))
            {
                ModelState.AddModelError("governorateId", "governorate id is not valid");
            }

            //Area 
            if (!_areaService.IsAreaValid(addRequestDto.AreaId, addRequestDto.GovernorateId))
            {
                ModelState.AddModelError("areaId", "area Id is not valid");
            }

            //NationalId 
            if (_patientService.IsEgyptian(addRequestDto.NationalityId)
                && string.IsNullOrEmpty(addRequestDto.NationalId))
            {
                ModelState.AddModelError(nameof(addRequestDto.NationalId), "National Id required when nationality is Egyptian");
            }

            //PassportId 
            if (!_patientService.IsEgyptian(addRequestDto.NationalityId)
                && string.IsNullOrEmpty(addRequestDto.PassportId))
            {
                ModelState.AddModelError(nameof(addRequestDto.PassportId), "Passport Id required when the nationality is not Egyptian");
            }

            if (!ModelState.IsValid)
            {
                // Create a list to store the error messages
                var errorList = ModelState
                    .Where(x => x.Value.Errors.Any())  // Filter out properties with no errors
                    .Select(x => new
                    {
                        Field = x.Key, // The field name
                        Errors = x.Value.Errors.Select(e => e.ErrorMessage).ToList() // List of error messages
                    })
                    .ToList();

                // Return a BadRequest with the list of errors
                return BadRequest(new { Errors = errorList });
            }

            #endregion

            var response = _requestService.Add(addRequestDto);


            return Ok(new { requestId = response.ValueId });

        }






    }
}
